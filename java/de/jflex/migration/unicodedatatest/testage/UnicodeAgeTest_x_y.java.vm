/*
 * Copyright (C) 2021 Google, LLC.
 * SPDX-License-Identifier: BSD-3-Clause
 */
package ${javaPackage};

import static com.google.common.truth.Truth.assertThat;
import static de.jflex.util.javac.JavaPackageUtils.getPathForClass;

import de.jflex.testing.unicodedata.AbstractEnumeratedPropertyDefinedScanner;
import de.jflex.testing.unicodedata.UnicodeDataScanners;
import de.jflex.util.scanner.ScannerFactory;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.annotation.Generated;
import jflex.core.unicode.UnicodeProperties;
import org.junit.Test;

#set( $uv = $unicodeVersion.toString().replace(".", "_") )
/** Test for Age property in {@link jflex.core.unicode.data.Unicode_${uv}}. */
@Generated("de.jflex.migration.unicodedatatest.UnicodeAgeGenerator")
// Generated from java/de/jflex/migration/unicodedatatest/UnicodeAgeTest_x_y.java.vm
public class $className {

  private static final String TEST_DIR = getPathForClass(${className}.class);

  @Test
  public void age() throws Exception {
    UnicodeProperties properties = new UnicodeProperties("$unicodeVersion");
  #foreach ( $a in $ages )
    assertThat(properties.getPropertyValues()).contains("age=$a");
  #end
  }

#foreach ( $a in $ages )
#set( $ua = $a.toString().replace(".", "_") )
  /**
   * Tests character class syntax of the Unicode $unicodeVersion
   * Age=$a property.
   */
  @Test
  public void ageIntervals_${ua}() throws Exception {
    assertAgeInterval(
        ScannerFactory.of(${scannerPrefix}_${ua}::new),
        ${scannerPrefix}_${ua}.YYEOF,
        "${scannerPrefix}_${ua}.output");
  }
#end

  /**
   * Tests subtracting Age Unicode property values in character sets
   * for Unicode $unicodeVersion,
   * e.g. {@code [\p{Age:2.0}--\p{Age:1.1}]}.
   */
  @Test
  public void ageIntervals_subtraction() throws Exception {
    assertAgeInterval(
        ScannerFactory.of(${scannerPrefix}_subtraction::new),
        ${scannerPrefix}_subtraction.YYEOF,
        "${scannerPrefix}_subtraction.output");
  }

  /**
   * Tests character class syntax of the Unicode $unicodeVersion
   * Age=Unassigned property.
   */
  @Test
  public void ageIntervals_unassigned() throws Exception {
    assertAgeInterval(
        ScannerFactory.of(${scannerPrefix}_unassigned::new),
        ${scannerPrefix}_unassigned.YYEOF,
        "${scannerPrefix}_unassigned.output");
  }

  private static void assertAgeInterval(
      ScannerFactory<? extends AbstractEnumeratedPropertyDefinedScanner> scannerFactory,
      int eof,
      String expectedFileName)
      throws IOException {
    Path expectedFile = Paths.get("javatests").resolve(TEST_DIR).resolve(expectedFileName);
    UnicodeDataScanners
        .assertAgeInterval(scannerFactory, eof, UnicodeDataScanners.Dataset.${dataset}, expectedFile);
  }
}
