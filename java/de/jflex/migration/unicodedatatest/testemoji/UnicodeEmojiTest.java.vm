/*
 * Copyright (C) 2021 Google, LLC.
 * SPDX-License-Identifier: BSD-3-Clause
 */
package de.jflex.testcase.unicode.unicode_${unicodeVersion.underscoreVersion()};

import static com.google.common.truth.Truth.assertThat;

import com.google.common.collect.ImmutableList;
import de.jflex.testing.unicodedata.SimpleIntervalsParser;
import de.jflex.testing.unicodedata.UnicodeDataScanners;
import de.jflex.ucd.CodepointRange;
import de.jflex.util.scanner.ScannerFactory;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.annotation.Generated;
import org.junit.Test;

// Generate from UnicodeEmojiTest.java.vm
/** Test the emoji property. */
@Generated(
    "de.jflex.migration.unicodedatatest.testemoji.UnicodeEmojiTestGenerator")
public class UnicodeEmojiTest_${unicodeVersion.underscoreVersion()} {

  private static final Path PACKAGE_DIRECTORY =
      Paths.get("javatests/de/jflex/testcase/unicode")
          .resolve("unicode_${unicodeVersion.underscoreVersion()}");

  private static ImmutableList<CodepointRange> expected;

  private static ImmutableList<CodepointRange> readGolden(String propName) throws Exception {
    Path expectedFile =
          PACKAGE_DIRECTORY
              .resolve("UnicodeEmoji_" + propName + "_${unicodeVersion.underscoreVersion()}.output");
    return SimpleIntervalsParser.parseRanges(expectedFile);
  }

#foreach ( $propName in $propertyNames )
  /** Test property {@code $propName}. */
  @Test
  public void emoji_$propName() throws Exception {
    UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()} scanner =
        UnicodeDataScanners.scanAllCodepoints(
            ScannerFactory.of(UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}::new),
            UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}.YYEOF,
            UnicodeDataScanners.Dataset.ALL);
    assertThat(scanner.ranges()).isEqualTo(readGolden("$propName"));
  }
#end
}
